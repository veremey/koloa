@mixin clearfix{
    &:after,&:before{
        content: "";
        clear: both;
        display: table;
    }
}
@mixin flexbox {
    display: -webkit-box;
    display: block;
    display: -moz-box;
    display: -webkit-flex;
    display: flex;
}
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -moz-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -moz-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -moz-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    align-items: $value;
}
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
        -moz-box-direction: reverse;
        -moz-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
        -moz-box-direction: normal;
        -moz-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
        -moz-box-direction: reverse;
        -moz-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
        -moz-box-direction: normal;
        -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -moz-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -moz-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -moz-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
        -moz-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
}
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }
    -webkit-box: $fg-boxflex;
    -moz-box: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}
@mixin flex-wrap($wrap : nowrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}
@mixin transition($ele, $dur, $fun, $delay) {
    -moz-transition: $ele $dur $fun $delay;
    -o-transition: $ele $dur $fun $delay;
    -webkit-transition: $ele $dur $fun $delay;
    transition: $ele $dur $fun $delay;
}
// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
    -webkit-align-self: $align;
    -moz-align-self: $align;
    -ms-align-self: $align;
    align-self: $align;
}
@mixin opacity($opacity) {
    filter: alpha(opacity=$opacity*100);
    -moz-opacity: $opacity;
    -khtml-opacity: $opacity;
    opacity: $opacity;
}
@mixin box_sizing{
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
@mixin no_select{
    -moz-user-select: none;     
    -ms-user-select: none;
    -webkit-user-select: none;
    -moz-user-select: -moz-none;
    user-select: none;     
}
@mixin transform($transform){
    -webkit-transform: $transform;  
    -ms-transform: $transform;  
    transform: $transform;  
}
@mixin animation($animation){
    -webkit-animation: $animation;
    -moz-animation:    $animation;
    -o-animation:      $animation;
    animation:         $animation;
}
@mixin animation_it_count($animation_it_count){
    -webkit-animation-iteration-count: $animation_it_count; 
    animation-iteration-count: $animation_it_count;
}
@mixin box_shadow($box_shadow){
    -webkit-box-shadow: $box_shadow;
    -moz-box-shadow: $box_shadow;
    box-shadow: $box_shadow;
}
@mixin width_calc($dep_hgt, $expression){
    width: $dep_hgt;
    width: -moz-calc(#{$expression});
    width: -webkit-calc(#{$expression});
    width: -o-calc(#{$expression});
    width: calc(#{$expression});
}
@mixin height_calc($dep_hgt, $expression){
    height: $dep_hgt;
    height: -moz-calc(#{$expression});
    height: -webkit-calc(#{$expression});
    height: -o-calc(#{$expression});
    height: calc(#{$expression});
}